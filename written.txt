Problem 3-4 Ans:

When a child process ends via "exit", it still remained in the process table only when its exit status be read and executed by "wait" of parent, and the resource of child will be released. Otherwise if the child ends without the parent waits, the resource will be hold.
cite: en.wikipedia.org/wiki/zombie_process


Problem 3-7 Ans:

If we run "ls" only, the shell will fork a process and exec "ls" to list the contents in the current working directory, and then exit after complete this work. The shell will remain for another command.

In the other hand, if we run "exec ls", the shell process will be replaced by ls process and when ls finishes its work, there would be no more shell waits.


Problem 3-8 Ans:

This program can be considered as a loop, and it will run "fork();" for 5 times. Each time the forkthem(n) runs, current process will be forked, and n minus by 1. So it will run fork() 5 times and finally when the program runs to the end, there would be 32 processes.


Problem 3-9 Ans:

There would be 3 different versions of X; the parent's X would be 20, and the X of the first child create by the first fork would be 10, the other child create by the second fork would be 15.


Problem 3-10 Ans:

In the Program 1., after the child does val++, printf the val "6", and returns, the parent will also do the same work. So there would be two "6" be print out, one is from child first and another is from parent.

For Program 2., the child would exit in the "else" statement, so only the parent will do the following work to print "6".
